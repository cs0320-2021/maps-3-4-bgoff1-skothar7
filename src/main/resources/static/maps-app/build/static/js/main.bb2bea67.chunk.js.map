{"version":3,"sources":["logo.svg","TextBox.js","Canvas.js","Route.js","App.js","reportWebVitals.js","index.js"],"names":["TextBox","curNorthWestLat","curNorthWestLon","canvas","ctx","props","className","label","type","onChange","e","target","value","Canvas","w","h","ref","useRef","useEffect","current","ratio","context","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","window","devicePixelRatio","getPixelRatio","getContext","width","getComputedStyle","getPropertyValue","slice","height","style","clearRect","lineWidth","curSouthEastLat","curSouthEastLon","parsedWay","startLat","startLon","endLat","endLon","rawWaysData","routetorender","listOfWays","split","console","log","length","i","parseFloat","beginPath","moveTo","lineTo","strokeStyle","stroke","Route","useState","setStartLat","setStartLon","setEndLat","setEndLon","refreshCanvas","route","setRoute","onPress","toSend","srclat","srclong","destlat","destlong","axios","post","headers","then","response","data","catch","error","requestRoute","App","src","logo","alt","href","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb2bea67.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\n\nfunction TextBox(props) {\n  return (\n    <div className=\"TextBox\">\n      {props.label}\n      <input  type=\"text\" label={props.label} onChange={(e) => props.onChange(e.target.value)}/>\n    </div>\n  );\n}\n\nexport default TextBox;\n","import './App.css';\nimport React, {useEffect, useRef} from \"react\";\n\nlet curNorthWestLat;\nlet curNorthWestLon;\n\nlet curSouthEastLat;\nlet curSouthEastLon;\n\nlet pixToCoord;\n\n// global reference to the oldCanvas element\nlet canvas;\n\n// global reference to the oldCanvas' context\nlet ctx;\n\n//http://www.petecorey.com/blog/2019/08/19/animating-a-canvas-with-react-hooks/\nconst getPixelRatio = context => {\n    let backingStore =\n        context.backingStorePixelRatio ||\n        context.webkitBackingStorePixelRatio ||\n        context.mozBackingStorePixelRatio ||\n        context.msBackingStorePixelRatio ||\n        context.oBackingStorePixelRatio ||\n        context.backingStorePixelRatio ||\n        1;\n    return (window.devicePixelRatio || 1) / backingStore;\n};\n\nfunction Canvas(props) {\n    let w = 600;\n    let h = 600;\n    let ref = useRef();\n    useEffect(() => {\n        canvas = ref.current;\n        ctx = canvas.getContext(\"2d\");\n        let ratio = getPixelRatio(ctx);\n        let width = getComputedStyle(canvas).getPropertyValue('width').slice(0, -2);\n        let height = getComputedStyle(canvas).getPropertyValue('height').slice(0, -2);\n        canvas.width = width * ratio;\n        canvas.height = height * ratio;\n        canvas.style.width = `${width}px`;\n        canvas.style.height = `${height}px`;\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        ctx.lineWidth = 1\n        pixToCoord = 8000;\n\n        curSouthEastLat = 41.823876;\n        curSouthEastLon = -71.395963;\n\n        curNorthWestLat = (curSouthEastLat - w/pixToCoord);\n        curNorthWestLon = (curSouthEastLon - h/pixToCoord);\n\n\n        let rawWaysData = props.routetorender\n        let listOfWays = [];\n        if (rawWaysData != null) {\n            listOfWays = (rawWaysData + '').split(\";\");\n        }\n\n        let parsedWay;\n        let type;\n        let startLat;\n        let startLon;\n        let endLat;\n        let endLon;\n        console.log(\"low\" + listOfWays.length);\n        for (let i=0; i<listOfWays.length; i++) {\n            parsedWay =  listOfWays[i].split(\",\");\n            type = parsedWay[0]\n            startLat = parseFloat(parsedWay[1]);\n            startLon = parseFloat(parsedWay[2]);\n            endLat = parseFloat(parsedWay[3]);\n            endLon = parseFloat(parsedWay[4]);\n            if (i === 500) {\n                console.log(h*(startLon - curNorthWestLon)/(curSouthEastLon - curNorthWestLon))\n            }\n            ctx.beginPath();\n            ctx.moveTo(w*(startLat - curNorthWestLat)/(curSouthEastLat - curNorthWestLat) - 300, h*(startLon - curNorthWestLon)/(curSouthEastLon - curNorthWestLon) - 300);\n            ctx.lineTo(w*(endLat - curNorthWestLat)/(curSouthEastLat - curNorthWestLat) - 300, h*(endLon - curNorthWestLon)/(curSouthEastLon - curNorthWestLon) - 300);\n            ctx.strokeStyle = \"red\";\n            if (type === \"\" || type === \"unclassified\") {\n                ctx.strokeStyle = \"blue\";\n            }\n            ctx.stroke();\n\n        }\n        console.log(\"done\")\n\n    })\n    return (\n        <div className=\"Canvas\">\n            <canvas\n                ref={ref}\n                style={{ width: w, height: h }}\n                routetorender={props.routetorender}\n                onChange={(e) => props.onChange(e.target.value)}\n            />\n\n        </div>\n    );\n}\n\nexport default Canvas;","import logo from './logo.svg';\nimport './App.css';\nimport TextBox from './TextBox'\nimport React, {useState, useEffect} from 'react'\nimport { AwesomeButton } from \"react-awesome-button\";\nimport \"react-awesome-button/dist/styles.css\";\nimport axios from \"axios\";\nimport Canvas from \"./Canvas\";\n\nfunction Route() {\n  const [startLat, setStartLat] = useState(0);\n  const [startLon, setStartLon] = useState(0);\n  const [endLat, setEndLat] = useState(0);\n  const [endLon, setEndLon] = useState(0);\n\n  const [startCanvas, refreshCanvas] = useState(\"\");\n  //TODO: Fill in the ? with appropriate names/values for a route.\n  //Hint: The defaults for latitudes and longitudes were 0s. What might the default useState value for a route be?\n    const [route, setRoute] = useState([]);\n\n  /**\n   * Makes an axios request.\n   */\n  const requestRoute = () => {\n    const toSend = {\n        //TODO: Pass in the values for the data. Follow the format the route expects!\n        srclat : startLat,\n        srclong : startLon,\n            destlat : endLat,\n            destlong : endLon\n  };\n\n      let config = {\n          headers: {\n              \"Content-Type\": \"application/json\",\n              'Access-Control-Allow-Origin': '*',\n          }\n      }\n\n    //Install and import this!\n    //TODO: Fill in 1) location for request 2) your data 3) configuration\n      axios.post(\n          \"http://localhost:4567/route\",\n          toSend,\n          config\n      )\n          .then(response => {\n              console.log(response.data);\n              //TODO: Go to the Main.java in the server from the stencil, and find what variable you should put here.\n              //Note: It is very important that you understand how this is set up and why it works!\n              setRoute(response.data[\"route\"]);//console.log  the response.data[\"route\"]\n          })\n\n          .catch(function (error) {\n              console.log(error);\n\n          });\n  }\n  return (\n    <div className=\"Route\">\n      <header className=\"Route-header\">\n        <title>This is a title</title>\n      </header>\n        <h1>{startLat}</h1>\n        <TextBox label={\"Start Latitude\"} onChange = {setStartLat}/>\n        <TextBox label={\"Start Longitude\"} onChange = {setStartLon}/>\n        <TextBox label={\"End Latitude\"} onChange = {setEndLat}/>\n        <TextBox label={\"End Longitude\"} onChange = {setEndLon}/>\n\n      <AwesomeButton type=\"primary\" onPress={() => {requestRoute()}}>Button</AwesomeButton>\n        <p>{route[2]}</p>\n\n        <Canvas routetorender={route[3]} onChange = {refreshCanvas} />\n\n\n    </div>\n  );\n}\nexport default Route;\n","import logo from './logo.svg';\nimport './App.css';\nimport Route from './Route'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Route/>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}