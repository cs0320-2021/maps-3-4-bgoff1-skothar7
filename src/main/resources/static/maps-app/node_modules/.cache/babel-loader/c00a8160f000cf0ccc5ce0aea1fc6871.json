{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\ben\\\\documents\\\\cs32\\\\maps-3-4-bgoff1-skothar7\\\\src\\\\main\\\\resources\\\\static\\\\maps-app\\\\src\\\\checkinFeed.js\",\n    _s = $RefreshSig$();\n\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport axios from \"axios\";\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet allCheckins = \"\";\n\nfunction CheckinFeed() {\n  _s();\n\n  const [newCheckins, setNewCheckins] = useState([]);\n  const [option, setOption] = useState(\"\");\n  let userData = \"\";\n  /**\r\n   * Makes an axios request.\r\n   */\n\n  const getCheckins = () => {\n    const toSend = {\n      dummy: 42 //TODO: Pass in the values for the data. Follow the format the route expects!\n\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    }; //Install and import this!\n    //TODO: Fill in 1) location for request 2) your data 3) configuration\n\n    axios.post(\"http://localhost:4567/checkin\", toSend, config).then(response => {\n      //TODO: Go to the Main.java in the server from the stencil, and find what variable you should put here.\n      //Note: It is very important that you understand how this is set up and why it works!\n      if (response != undefined) {\n        setNewCheckins(response.data[\"checkins\"]);\n      }\n    }).catch(function (error) {\n      console.log(error); //console.log(error.response.data);\n    });\n  };\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      getCheckins();\n    }, 3000);\n\n    if (option != \"\") {\n      const toSend = {\n        id: option //TODO: Pass in the values for the data. Follow the format the route expects!\n\n      };\n      let config = {\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Access-Control-Allow-Origin': '*'\n        }\n      }; //Install and import this!\n      //TODO: Fill in 1) location for request 2) your data 3) configuration\n\n      axios.post(\"http://localhost:4567/user\", toSend, config).then(response => {\n        //TODO: Go to the Main.java in the server from the stencil, and find what variable you should put here.\n        //Note: It is very important that you understand how this is set up and why it works!\n        if (response != undefined) {\n          let rawUserData = response.data[\"user\"];\n          userData = \"\";\n\n          for (let j = 0; j < rawUserData.length; j++) {\n            let currentUserCheckin = rawUserData[j].split(\",\");\n            userData = userData + currentUserCheckin[0] + \", \" + currentUserCheckin[1] + \", \" + currentUserCheckin[2] + \", \" + currentUserCheckin[3] + \", \" + currentUserCheckin[4];\n            console.log(userData);\n          }\n        }\n      }).catch(function (error) {\n        console.log(error); //console.log(error.response.data);\n      });\n    }\n\n    for (let i = 0; i < newCheckins.length; i++) {\n      let currentCheckin = newCheckins[i].split(\",\");\n      allCheckins = allCheckins + \"<option value=\" + currentCheckin[0] + \">\" + currentCheckin[0] + \", \" + currentCheckin[1] + \", \" + currentCheckin[2] + \", \" + currentCheckin[3] + \", \" + currentCheckin[4] + \"</option>\";\n    }\n\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"CheckinFeed\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      onChange: e => {\n        setOption(e.target.value);\n      },\n      name: \"checkins\",\n      multiple: true,\n      size: \"10\",\n      children: /*#__PURE__*/_jsxDEV(\"optgroup\", {\n        label: \"checkin-list\",\n        dangerouslySetInnerHTML: {\n          __html: allCheckins\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), userData]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CheckinFeed, \"DtJ4Jm44ilyoaGtAu7jB/39ywVE=\");\n\n_c = CheckinFeed;\nexport default CheckinFeed; // $(function()){\n//     setInterval(funcEverySec, 1000);\n// });\n//\n// function funcEverySec {\n//\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckinFeed\");","map":{"version":3,"sources":["C:/users/ben/documents/cs32/maps-3-4-bgoff1-skothar7/src/main/resources/static/maps-app/src/checkinFeed.js"],"names":["axios","React","useState","useEffect","allCheckins","CheckinFeed","newCheckins","setNewCheckins","option","setOption","userData","getCheckins","toSend","dummy","config","headers","post","then","response","undefined","data","catch","error","console","log","interval","setInterval","id","rawUserData","j","length","currentUserCheckin","split","i","currentCheckin","clearInterval","e","target","value","__html"],"mappings":"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","sourcesContent":["import logo from './logo.svg';\r\nimport './App.css';\r\nimport axios from \"axios\";\r\nimport React, {useState, useEffect} from 'react'\r\n\r\nlet allCheckins = \"\"\r\n\r\nfunction CheckinFeed() {\r\n\r\n    const [newCheckins, setNewCheckins] = useState([])\r\n    const [option, setOption] = useState(\"\")\r\n    let userData = \"\"\r\n\r\n\r\n    /**\r\n     * Makes an axios request.\r\n     */\r\n    const getCheckins = () => {\r\n        const toSend = {\r\n            dummy : 42,\r\n            //TODO: Pass in the values for the data. Follow the format the route expects!\r\n        };\r\n\r\n        let config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Access-Control-Allow-Origin': '*',\r\n            }\r\n        }\r\n\r\n        //Install and import this!\r\n        //TODO: Fill in 1) location for request 2) your data 3) configuration\r\n        axios.post(\r\n            \"http://localhost:4567/checkin\",\r\n            toSend,\r\n            config\r\n        )\r\n            .then(response => {\r\n                //TODO: Go to the Main.java in the server from the stencil, and find what variable you should put here.\r\n                //Note: It is very important that you understand how this is set up and why it works!\r\n                if(response != undefined) {\r\n                    setNewCheckins(response.data[\"checkins\"]);\r\n                }\r\n            })\r\n\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                //console.log(error.response.data);\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        const interval = setInterval(() => {\r\n            getCheckins();\r\n        }, 3000);\r\n        if (option != \"\") {\r\n            const toSend = {\r\n                id: option,\r\n                //TODO: Pass in the values for the data. Follow the format the route expects!\r\n            };\r\n\r\n            let config = {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    'Access-Control-Allow-Origin': '*',\r\n                }\r\n            }\r\n\r\n            //Install and import this!\r\n            //TODO: Fill in 1) location for request 2) your data 3) configuration\r\n            axios.post(\r\n                \"http://localhost:4567/user\",\r\n                toSend,\r\n                config\r\n            )\r\n                .then(response => {\r\n                    //TODO: Go to the Main.java in the server from the stencil, and find what variable you should put here.\r\n                    //Note: It is very important that you understand how this is set up and why it works!\r\n                    if (response != undefined) {\r\n                        let rawUserData = response.data[\"user\"]\r\n                        userData = \"\"\r\n                        for (let j = 0; j < rawUserData.length; j++) {\r\n                            let currentUserCheckin = rawUserData[j].split(\",\")\r\n                            userData = userData + currentUserCheckin[0] + \", \" + currentUserCheckin[1]\r\n                                + \", \" + currentUserCheckin[2] + \", \" + currentUserCheckin[3] + \", \" + currentUserCheckin[4]\r\n                            console.log(userData)\r\n                        }\r\n                    }\r\n                })\r\n\r\n                .catch(function (error) {\r\n                    console.log(error);\r\n                    //console.log(error.response.data);\r\n                });\r\n        }\r\n        for (let i=0; i < newCheckins.length; i++) {\r\n            let currentCheckin = newCheckins[i].split(\",\")\r\n            allCheckins = allCheckins + \"<option value=\"+currentCheckin[0]+\">\"+currentCheckin[0] + \", \" + currentCheckin[1]\r\n                + \", \" + currentCheckin[2] + \", \" + currentCheckin[3] + \", \" + currentCheckin[4]+\"</option>\"\r\n        }\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"CheckinFeed\">\r\n            <select onChange={(e) => {setOption(e.target.value)}} name=\"checkins\" multiple size=\"10\">\r\n                <optgroup label=\"checkin-list\" dangerouslySetInnerHTML={{__html: allCheckins}}>\r\n                </optgroup>\r\n            </select>\r\n            {userData}\r\n         </div>\r\n    );\r\n}\r\n\r\nexport default CheckinFeed;\r\n\r\n// $(function()){\r\n//     setInterval(funcEverySec, 1000);\r\n// });\r\n//\r\n// function funcEverySec {\r\n//\r\n// }"]},"metadata":{},"sourceType":"module"}