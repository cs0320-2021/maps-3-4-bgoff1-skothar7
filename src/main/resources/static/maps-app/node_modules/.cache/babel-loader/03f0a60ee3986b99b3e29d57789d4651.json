{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\ben\\\\documents\\\\cs32\\\\maps-3-4-bgoff1-skothar7\\\\src\\\\main\\\\resources\\\\static\\\\maps-app\\\\src\\\\checkinFeed.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport axios from \"axios\";\nimport React, { useState, useEffect } from 'react';\nimport { AwesomeButton } from \"react-awesome-button\";\nimport TextBox from \"./TextBox\"; //global reference to HTML String of all new checkins, which is built inside useEffect()\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet allCheckins = \"\"; //global reference to User ID of selected user\n\nlet user = \"\"; //function to set a the user global reference from the text box\n\nfunction setUser(u) {\n  user = u;\n}\n/**\r\n * function that creates two Select tables: one with all checkins and another with a specific user's checkins\r\n * @returns {JSX.Element}\r\n * @constructor for CheckinFeed, which is called in App.js\r\n */\n\n\nfunction CheckinFeed() {\n  _s();\n\n  const [newCheckins, setNewCheckins] = useState([]);\n  const [userData, setUserData] = useState(\"\"); //userDataBuilder builds a HTML String of checkin records from the post request\n\n  let userDataBuilder = \"\";\n  /**\r\n   * Makes an axios request every 3 seconds to update our list of Checkins.\r\n   */\n\n  const getCheckins = () => {\n    console.log(\"new checkin interval\");\n    const toSend = {\n      dummy: 42\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post( //alerts the backend that we want to retrieve all new checkins since the last post\n    \"http://localhost:4567/checkin\", toSend, config).then(response => {\n      if (response !== undefined) {\n        setNewCheckins(response.data[\"checkins\"]);\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n  /**\r\n   * Searches for a specific user to display all checkins for that user\r\n   */\n\n\n  const searchForUser = () => {\n    console.log(\"trying to search for user\"); //---------post request for selected user-------------\n\n    const toSend2 = {\n      //sends the user ID typed into the GUI to the backend\n      id: user\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post( //post request to retrieve all user checkins for user with given ID\n    \"http://localhost:4567/user\", toSend2, config).then(response2 => {\n      if (response2 !== undefined) {\n        let rawUserData = response2.data[\"user\"];\n        userDataBuilder = \"\";\n\n        for (let j = 0; j < rawUserData.length; j++) {\n          //loops through all checkins received of a specific user and iteratively builds HTML options\n          let currentUserCheckin = rawUserData[j].split(\",\");\n          userDataBuilder = userDataBuilder + \"<option value =\" + currentUserCheckin[0] + \">\" + currentUserCheckin[0] + \",\" + currentUserCheckin[1] + \", \" + currentUserCheckin[2] + \", \" + currentUserCheckin[3] + \", \" + currentUserCheckin[4] + \"</option>\";\n        }\n\n        console.log(userDataBuilder); //hook: sets userDataBuilder so that upon return, we are displaying selected clicked user's data\n\n        setUserData(userDataBuilder);\n      }\n    }).catch(function (error) {\n      console.log(error);\n      console.log(error.response.data);\n    });\n  };\n\n  useEffect(() => {\n    //runs getCheckins every 3 seconds\n    setTimeout(getCheckins, 3000);\n    console.log(\"inside useEffect\");\n\n    for (let i = 0; i < newCheckins.length; i++) {\n      let currentCheckin = newCheckins[i].split(\",\"); //loops through all new checkins received since the last post request and iteratively builds HTML options\n\n      allCheckins = allCheckins + \"<option value=\" + currentCheckin[0] + \">\" + currentCheckin[0] + \", \" + currentCheckin[1] + \", \" + currentCheckin[2] + \", \" + currentCheckin[3] + \", \" + currentCheckin[4] + \"</option>\";\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"CheckinFeed\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"checkins\",\n      multiple: true,\n      size: \"10\",\n      children: /*#__PURE__*/_jsxDEV(\"optgroup\", {\n        label: \"checkin-list\",\n        dangerouslySetInnerHTML: {\n          __html: allCheckins\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"User feed\",\n      children: [/*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"Usercheckins\",\n        multiple: true,\n        size: \"10\",\n        children: /*#__PURE__*/_jsxDEV(\"optgroup\", {\n          label: \"User checkin-list\",\n          dangerouslySetInnerHTML: {\n            __html: userData\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TextBox, {\n        label: \"User ID \",\n        onChange: setUser\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AwesomeButton, {\n        type: \"primary\",\n        onPress: () => {\n          searchForUser();\n        },\n        children: \"Find User Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CheckinFeed, \"0U7cufniSshGpUcWsgddJvJ7PMk=\");\n\n_c = CheckinFeed;\nexport default CheckinFeed;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckinFeed\");","map":{"version":3,"sources":["C:/users/ben/documents/cs32/maps-3-4-bgoff1-skothar7/src/main/resources/static/maps-app/src/checkinFeed.js"],"names":["axios","React","useState","useEffect","AwesomeButton","TextBox","allCheckins","user","setUser","u","CheckinFeed","newCheckins","setNewCheckins","userData","setUserData","userDataBuilder","getCheckins","console","log","toSend","dummy","config","headers","post","then","response","undefined","data","catch","error","searchForUser","toSend2","id","response2","rawUserData","j","length","currentUserCheckin","split","setTimeout","i","currentCheckin","__html"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport axios from \"axios\";\r\nimport React, {useState, useEffect} from 'react'\r\nimport {AwesomeButton} from \"react-awesome-button\";\r\nimport TextBox from \"./TextBox\";\r\n\r\n//global reference to HTML String of all new checkins, which is built inside useEffect()\r\nlet allCheckins = \"\"\r\n\r\n//global reference to User ID of selected user\r\nlet user = \"\";\r\n\r\n//function to set a the user global reference from the text box\r\nfunction setUser(u) {\r\n    user = u\r\n}\r\n\r\n/**\r\n * function that creates two Select tables: one with all checkins and another with a specific user's checkins\r\n * @returns {JSX.Element}\r\n * @constructor for CheckinFeed, which is called in App.js\r\n */\r\nfunction CheckinFeed() {\r\n\r\n    const [newCheckins, setNewCheckins] = useState([])\r\n    const [userData, setUserData] = useState(\"\")\r\n    //userDataBuilder builds a HTML String of checkin records from the post request\r\n    let userDataBuilder = \"\"\r\n\r\n\r\n    /**\r\n     * Makes an axios request every 3 seconds to update our list of Checkins.\r\n     */\r\n    const getCheckins = () => {\r\n\r\n        console.log(\"new checkin interval\")\r\n        const toSend = {\r\n            dummy: 42,\r\n        };\r\n\r\n        let config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Access-Control-Allow-Origin': '*',\r\n            }\r\n        }\r\n\r\n        axios.post(\r\n            //alerts the backend that we want to retrieve all new checkins since the last post\r\n            \"http://localhost:4567/checkin\",\r\n            toSend,\r\n            config\r\n        )\r\n            .then(response => {\r\n\r\n                if (response !== undefined) {\r\n                    setNewCheckins(response.data[\"checkins\"]);\r\n                }\r\n            })\r\n\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n    /**\r\n     * Searches for a specific user to display all checkins for that user\r\n     */\r\n    const searchForUser = () => {\r\n        console.log(\"trying to search for user\")\r\n\r\n        //---------post request for selected user-------------\r\n        const toSend2 = {\r\n            //sends the user ID typed into the GUI to the backend\r\n            id: user\r\n        };\r\n\r\n        let config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Access-Control-Allow-Origin': '*',\r\n            }\r\n        }\r\n        axios.post(\r\n            //post request to retrieve all user checkins for user with given ID\r\n            \"http://localhost:4567/user\",\r\n            toSend2,\r\n            config\r\n        )\r\n            .then(response2 => {\r\n                if (response2 !== undefined) {\r\n                    let rawUserData = response2.data[\"user\"]\r\n                    userDataBuilder = \"\"\r\n                    for (let j = 0; j < rawUserData.length; j++) {\r\n                        //loops through all checkins received of a specific user and iteratively builds HTML options\r\n                        let currentUserCheckin = rawUserData[j].split(\",\")\r\n                        userDataBuilder = userDataBuilder + \"<option value =\" + currentUserCheckin[0] + \">\" +\r\n                            currentUserCheckin[0] + \",\" + currentUserCheckin[1] + \", \" + currentUserCheckin[2] + \", \" +\r\n                            currentUserCheckin[3] + \", \" + currentUserCheckin[4]\r\n                            + \"</option>\"\r\n\r\n                    }\r\n                    console.log(userDataBuilder)\r\n                    //hook: sets userDataBuilder so that upon return, we are displaying selected clicked user's data\r\n                    setUserData(userDataBuilder)\r\n                }\r\n            })\r\n\r\n            .catch(function (error) {\r\n                console.log(error);\r\n                console.log(error.response.data);\r\n            });\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        //runs getCheckins every 3 seconds\r\n        setTimeout(getCheckins, 3000);\r\n        console.log(\"inside useEffect\");\r\n        for (let i = 0; i < newCheckins.length; i++) {\r\n            let currentCheckin = newCheckins[i].split(\",\")\r\n            //loops through all new checkins received since the last post request and iteratively builds HTML options\r\n            allCheckins = allCheckins + \"<option value=\" + currentCheckin[0] + \">\" + currentCheckin[0] + \", \" +\r\n                currentCheckin[1] + \", \" + currentCheckin[2] + \", \" + currentCheckin[3] + \", \" + currentCheckin[4] +\r\n                \"</option>\"\r\n        }\r\n\r\n\r\n    })\r\n\r\n    return (\r\n        <div className=\"CheckinFeed\">\r\n            <select name=\"checkins\" multiple size=\"10\">\r\n                {/*uses allCheckins HTML String to create option elements within the optgroup tags*/}\r\n                <optgroup label=\"checkin-list\" dangerouslySetInnerHTML={{__html: allCheckins}}>\r\n                </optgroup>\r\n            </select>\r\n\r\n            <div className=\"User feed\">\r\n                <select name=\"Usercheckins\" multiple size=\"10\">\r\n                    {/*uses userData HTML String to create option elements within the optgroup tags*/}\r\n                    <optgroup label=\"User checkin-list\" dangerouslySetInnerHTML={{__html: userData}}>\r\n                    </optgroup>\r\n                </select>\r\n                {/*Button and textbox input for retrieving checkin data for a specific user*/}\r\n                <TextBox label={\"User ID \"} onChange={setUser}/>\r\n                {/*buttin submits entered user ID to post request*/}\r\n                <AwesomeButton type=\"primary\" onPress={() => {\r\n                    searchForUser()\r\n                }}>Find User Data</AwesomeButton>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default CheckinFeed;"]},"metadata":{},"sourceType":"module"}