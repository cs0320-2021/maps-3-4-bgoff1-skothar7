{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\ben\\\\documents\\\\cs32\\\\maps-3-4-bgoff1-skothar7\\\\src\\\\main\\\\resources\\\\static\\\\maps-app\\\\src\\\\Route.js\",\n    _s = $RefreshSig$();\n\nimport './App.css';\nimport TextBox from './TextBox';\nimport React, { useState, useEffect, useRef } from 'react';\nimport { AwesomeButton } from \"react-awesome-button\";\nimport \"react-awesome-button/dist/styles.css\";\nimport axios from \"axios\"; // global reference to the canvas element\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet canvas; // global reference to the canvas' context\n\nlet ctx; //http://www.petecorey.com/blog/2019/08/19/animating-a-canvas-with-react-hooks/\n//helps to smooth lines drawn on canvas by increasing resolution\n\nconst getPixelRatio = context => {\n  let backingStore = context.backingStorePixelRatio || context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n  return (window.devicePixelRatio || 1) / backingStore;\n}; //initiate values for first render\n\n\nlet startLat = 41.831311;\nlet startLon = -71.406524;\nlet endLat = 41.821395;\nlet endLon = -71.396608;\nlet clickCoordinate = [];\nlet releaseCoordinate = [];\nlet releaseCoordinate2 = [];\nlet routeStartLat = \"\";\nlet routeStartLon = \"\";\nlet routeEndLat = \"\";\nlet routeEndLon = \"\";\nlet route = [];\nlet totalPathLength;\nlet journeyInfoString = \"Enter your source and destination to find the shortest path and \" + \"how long it will take to walk there.\";\nlet hasClicked = false; //getters and setters for global values\n\nfunction setStartLat(slat) {\n  startLat = parseFloat(slat);\n}\n\nfunction getStartLat() {\n  return parseFloat(startLat);\n}\n\nfunction setStartLon(slon) {\n  startLon = parseFloat(slon);\n}\n\nfunction getStartLon() {\n  return parseFloat(startLon);\n}\n\nfunction setEndLat(elat) {\n  endLat = parseFloat(elat);\n}\n\nfunction getEndLat() {\n  return parseFloat(endLat);\n}\n\nfunction setEndLon(elon) {\n  endLon = parseFloat(elon);\n}\n\nfunction getEndLon() {\n  return parseFloat(endLon);\n}\n\nfunction setRouteStartLat(slat) {\n  routeStartLat = slat;\n}\n\nfunction getRouteStartLat() {\n  return routeStartLat;\n}\n\nfunction setRouteStartLon(slon) {\n  routeStartLon = slon;\n}\n\nfunction getRouteStartLon() {\n  return routeStartLon;\n}\n\nfunction setRouteEndLat(elat) {\n  routeEndLat = elat;\n}\n\nfunction getRouteEndLat() {\n  return routeEndLat;\n}\n\nfunction setRouteEndLon(elon) {\n  routeEndLon = elon;\n}\n\nfunction getRouteEndLon() {\n  return routeEndLon;\n}\n\nfunction setClickCoordinate(click) {\n  clickCoordinate = click;\n}\n\nfunction getClickCoordinate() {\n  return clickCoordinate;\n}\n\nfunction setReleaseCoordinate(release) {\n  releaseCoordinate = release;\n}\n\nfunction getReleaseCoordinate() {\n  return releaseCoordinate;\n}\n\nfunction setSecondReleaseCoordinate(release) {\n  releaseCoordinate2 = release;\n}\n\nfunction getSecondReleaseCoordinate() {\n  return releaseCoordinate2;\n}\n\nfunction setRoute(r) {\n  route = r;\n}\n\nfunction getRoute() {\n  return route;\n}\n/**\r\n * Contains all the logic for pixel and coordinate conversions; post requests\r\n * for rendering ways within a bounded box and for getting the shortest path; drawing on canvas; utilities like\r\n * panning, zooming and scrollong;\r\n * @param props\r\n * @returns {JSX.Element}\r\n * @constructor for Route, which is called in App.js\r\n */\n\n\nfunction Route(props) {\n  _s();\n\n  const w = 600.0;\n  const h = 600.0; //Ratio used to convert between clicks on the screen and latitudes used to define ways\n\n  let coordToPix = Math.abs((getStartLon() - getEndLon()) / w); //The ratio of zooming from the most recent zoom action\n\n  const [zoomInFactor, setZoomInFactor] = useState(1); //Message telling the user how long their route will take\n\n  const [journeyStringMsg, setJourneyStringMsg] = useState(\"\"); //The ways being drawn on the canvas\n\n  const [ways, setWays] = useState([]); // Makes an axios request and gets all ways within current map view\n\n  const requestWays = () => {\n    const toSend = {\n      //passes in boundaries of current map view\n      srclat: getStartLat(),\n      srclong: getStartLon(),\n      destlat: getEndLat(),\n      destlong: getEndLon()\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:4567/ways\", toSend, config).then(response => {\n      setWays(response.data[\"ways\"]);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  let ref = useRef(); //We use this to load the initial view of Browns campus on reloading the page\n\n  const [firstRender, setFirstRender] = useState(true);\n  useEffect(() => {\n    if (firstRender) {\n      setFirstRender(false);\n      requestWays();\n    }\n\n    canvas = ref.current; //http://www.petecorey.com/blog/2019/08/19/animating-a-canvas-with-react-hooks/\n    //smooths lines\n\n    ctx = canvas.getContext(\"2d\");\n    let ratio = getPixelRatio(ctx);\n    let width = getComputedStyle(canvas).getPropertyValue('width').slice(0, -2);\n    let height = getComputedStyle(canvas).getPropertyValue('height').slice(0, -2);\n    canvas.width = width * ratio;\n    canvas.height = height * ratio;\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`; //Print route on top of ways and ways on top of background so that the nothing gets covered up\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.lineWidth = 1;\n    ctx.fillStyle = \"#e8d8c3\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    printCanvas(ways);\n    printCanvas(getRoute());\n  });\n\n  const printCanvas = toPrint => {\n    console.log(\"Printing \" + toPrint.length + \" elements\");\n    let parsedWay;\n    let type;\n    let startLatWay;\n    let startLonWay;\n    let endLatWay;\n    let endLonWay;\n    let startCircle = false;\n    let startPixX;\n    let startPixY;\n    let endPixX;\n    let endPixY;\n\n    for (let i = 0; i < toPrint.length; i++) {\n      //extracts all data needed to print the way at index i\n      parsedWay = toPrint[i].split(\",\");\n      type = parsedWay[0];\n      startLatWay = parseFloat(parsedWay[1]);\n      startLonWay = parseFloat(parsedWay[2]);\n      endLatWay = parseFloat(parsedWay[3]);\n      endLonWay = parseFloat(parsedWay[4]);\n      startPixX = w * (startLonWay - getStartLon()) / (getEndLon() - getStartLon());\n      startPixY = h * (startLatWay - getStartLat()) / (getEndLat() - getStartLat());\n      endPixX = w * (endLonWay - getStartLon()) / (getEndLon() - getStartLon());\n      endPixY = h * (endLatWay - getStartLat()) / (getEndLat() - getStartLat());\n      ctx.beginPath();\n      ctx.moveTo(startPixX, startPixY);\n      ctx.lineTo(endPixX, endPixY); //Traversable ways are red, non-traversable ways are blue, and routes are green\n\n      ctx.strokeStyle = \"red\";\n\n      if (type === \"\" || type === \"unclassified\") {\n        ctx.strokeStyle = \"blue\";\n      } else {\n        if (type === \"path\") {\n          ctx.strokeStyle = \"#80CA28\"; //Route made thicker so they stand out\n\n          ctx.lineWidth = 5;\n          ctx.stroke(); //startCircle used to tell us when to print the circles around the endpoints of the route\n\n          if (!startCircle) {\n            //Print circle at beginning of route if not yet printed\n            ctx.moveTo(startPixX, startPixY);\n            ctx.beginPath();\n            ctx.arc(startPixX, startPixY, 15, 0, 2 * Math.PI);\n            startCircle = true;\n          } else {\n            if (i === toPrint.length - 1) {\n              //Print circle at end of route if this is the last way being printed\n              ctx.moveTo(endPixX, endPixY);\n              ctx.beginPath();\n              ctx.arc(endPixX, endPixY, 15, 0, 2 * Math.PI);\n            }\n          }\n\n          startLatWay = parseFloat(parsedWay[1]);\n          startLonWay = parseFloat(parsedWay[2]);\n          endLatWay = parseFloat(parsedWay[3]);\n          endLonWay = parseFloat(parsedWay[4]); //Updating the message telling user how long their route is and will take to walk\n\n          totalPathLength = totalPathLength + Math.sqrt(Math.pow(startLatWay - endLatWay, 2) + Math.pow(startLonWay - endLonWay, 2));\n          journeyInfoString = \"Your journey will be \" + Number((totalPathLength * 69).toFixed(2)) + \" miles. This will take you \" + Number((totalPathLength * 22.25 * 60).toFixed(2)) + \" minutes by foot.\";\n        }\n      }\n\n      ctx.stroke(); //reset line width for non-route ways\n\n      ctx.lineWidth = 1;\n    }\n  }; // Makes an axios request and gets the route between the two points defined by the user\n\n\n  const refreshButton = () => {\n    ctx.fillStyle = \"#e8d8c3\";\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    printCanvas(ways); //Used to convert start and end points to coordinates\n    //in case user inputted one set of coordinates and one pair of street names\n\n    if (getRouteStartLat() === \"\" && getRouteStartLon() === \"\" && getRouteEndLat() !== \"\" && getRouteEndLon() !== \"\") {\n      setRouteStartLon((getReleaseCoordinate()[0] * (getEndLon() - getStartLon()) / w + getStartLon()).toString());\n      setRouteStartLat((getReleaseCoordinate()[1] * (getEndLat() - getStartLat()) / h + getStartLat()).toString());\n    } else if (getRouteEndLat() === \"\" && getRouteEndLon() === \"\" && getRouteStartLat() !== \"\" && getRouteStartLon() !== \"\") {\n      setRouteEndLon((getReleaseCoordinate()[0] * (getEndLon() - getStartLon()) / w + getStartLon()).toString());\n      setRouteEndLat((getReleaseCoordinate()[1] * (getEndLat() - getStartLat()) / h + getStartLat()).toString());\n    }\n\n    const toSend = {\n      srclat: getRouteStartLat(),\n      srclong: getRouteStartLon(),\n      destlat: getRouteEndLat(),\n      destlong: getRouteEndLon()\n    };\n    let config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      }\n    };\n    axios.post(\"http://localhost:4567/route\", toSend, config).then(response => {\n      let currentRoute = response.data[\"route\"];\n      totalPathLength = 0; //find path\n\n      setRoute(currentRoute); //print path\n\n      printCanvas(currentRoute); //tell user length and walking time of path\n\n      setJourneyStringMsg(journeyInfoString);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  const clickedOnCanvas = clicked => {\n    setClickCoordinate(clicked);\n  };\n\n  const releasedOnCanvas = released => {\n    setReleaseCoordinate(released);\n\n    if (getClickCoordinate()[0] === getReleaseCoordinate()[0] && getClickCoordinate()[1] === getReleaseCoordinate()[1]) {\n      //Selecting route start/end if clicked and released on same coordinate\n      if (hasClicked) {\n        // clicked and released second coordinate, time to calculate route\n        setRouteStartLon(getSecondReleaseCoordinate()[0] * (getEndLon() - getStartLon()) / w + getStartLon());\n        setRouteStartLat(getSecondReleaseCoordinate()[1] * (getEndLat() - getStartLat()) / h + getStartLat());\n        setRouteEndLon(released[0] * (getEndLon() - getStartLon()) / w + getStartLon());\n        setRouteEndLat(released[1] * (getEndLat() - getStartLat()) / h + getStartLat()); //finds route and print\n\n        refreshButton();\n        hasClicked = false;\n      } else {\n        //clicked and released first coordinate\n        setSecondReleaseCoordinate(released);\n        hasClicked = true;\n      }\n    } else {\n      //Panning if clicked and released on different coordinates\n      let dX = (parseFloat(getReleaseCoordinate()[0]) - parseFloat(getClickCoordinate()[0])) * coordToPix;\n      let dY = (parseFloat(getReleaseCoordinate()[1]) - parseFloat(getClickCoordinate()[1])) * coordToPix;\n      setStartLat(getStartLat() + dY);\n      setEndLat(getEndLat() + dY);\n      setEndLon(getEndLon() - dX);\n      setStartLon(getStartLon() - dX); //reprint way and route with new boundaries\n\n      requestWays();\n      printCanvas(getRoute());\n    }\n  };\n\n  const scrollHandler = scrollVal => {\n    if (scrollVal < 0) {\n      //zooming in\n      setZoomCoords(0.91);\n    } else if (scrollVal > 0) {\n      //zooming out\n      setZoomCoords(1.1);\n    }\n  };\n\n  const setZoomCoords = ratio => {\n    //set bounding box based on zoom ratio\n    const avgLat = (getStartLat() + getEndLat()) / 2;\n    const avgLon = (getStartLon() + getEndLon()) / 2;\n    const newStartLat = avgLat + Math.abs(getStartLat() - avgLat) * ratio;\n    const newEndLat = avgLat - Math.abs(getEndLat() - avgLat) * ratio;\n    const newEndLon = avgLon + Math.abs(getEndLon() - avgLon) * ratio;\n    const newStartLon = avgLon - Math.abs(getStartLon() - avgLon) * ratio;\n    setStartLat(newStartLat);\n    setEndLat(newEndLat);\n    setEndLon(newEndLon);\n    setStartLon(newStartLon); //reprint canvas if zooming out\n\n    if (zoomInFactor > 1) {\n      requestWays();\n    } else {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.lineWidth = 1;\n      ctx.fillStyle = \"#e8d8c3\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      printCanvas(ways);\n      printCanvas(getRoute());\n    }\n\n    setZoomInFactor(ratio);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Route\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"Route-header\",\n      children: /*#__PURE__*/_jsxDEV(\"title\", {\n        children: \"This is a title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextBox, {\n      label: \"Street 1 or Start Latitude \",\n      onChange: setRouteStartLat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextBox, {\n      label: \"Cross Street 1 or Start Longitude \",\n      onChange: setRouteStartLon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextBox, {\n      label: \"Street 2 or End Latitude \",\n      onChange: setRouteEndLat\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(TextBox, {\n      label: \"Cross Street 2 or End Longitude \",\n      onChange: setRouteEndLon\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AwesomeButton, {\n      type: \"primary\",\n      onPress: () => {\n        refreshButton();\n      },\n      children: \"Find Path\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AwesomeButton, {\n      type: \"primary\",\n      onPress: () => {\n        setZoomCoords(0.91);\n      },\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(AwesomeButton, {\n      type: \"primary\",\n      onPress: () => {\n        setZoomCoords(1.1);\n      },\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: journeyStringMsg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: ref,\n      style: {\n        width: w,\n        height: h\n      },\n      onChange: e => props.onChange(e.target.value),\n      onMouseDown: e => clickedOnCanvas([e.pageX - canvas.offsetLeft, e.pageY - canvas.offsetTop]),\n      onMouseUp: e => releasedOnCanvas([e.pageX - canvas.offsetLeft, e.pageY - canvas.offsetTop]),\n      onWheel: e => scrollHandler(e.deltaY)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 428,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Route, \"ucx6eAT63VI9ZnN2ErxF33LEM6M=\");\n\n_c = Route;\nexport default Route;\n\nvar _c;\n\n$RefreshReg$(_c, \"Route\");","map":{"version":3,"sources":["C:/users/ben/documents/cs32/maps-3-4-bgoff1-skothar7/src/main/resources/static/maps-app/src/Route.js"],"names":["TextBox","React","useState","useEffect","useRef","AwesomeButton","axios","canvas","ctx","getPixelRatio","context","backingStore","backingStorePixelRatio","webkitBackingStorePixelRatio","mozBackingStorePixelRatio","msBackingStorePixelRatio","oBackingStorePixelRatio","window","devicePixelRatio","startLat","startLon","endLat","endLon","clickCoordinate","releaseCoordinate","releaseCoordinate2","routeStartLat","routeStartLon","routeEndLat","routeEndLon","route","totalPathLength","journeyInfoString","hasClicked","setStartLat","slat","parseFloat","getStartLat","setStartLon","slon","getStartLon","setEndLat","elat","getEndLat","setEndLon","elon","getEndLon","setRouteStartLat","getRouteStartLat","setRouteStartLon","getRouteStartLon","setRouteEndLat","getRouteEndLat","setRouteEndLon","getRouteEndLon","setClickCoordinate","click","getClickCoordinate","setReleaseCoordinate","release","getReleaseCoordinate","setSecondReleaseCoordinate","getSecondReleaseCoordinate","setRoute","r","getRoute","Route","props","w","h","coordToPix","Math","abs","zoomInFactor","setZoomInFactor","journeyStringMsg","setJourneyStringMsg","ways","setWays","requestWays","toSend","srclat","srclong","destlat","destlong","config","headers","post","then","response","data","catch","error","console","log","ref","firstRender","setFirstRender","current","getContext","ratio","width","getComputedStyle","getPropertyValue","slice","height","style","clearRect","lineWidth","fillStyle","fillRect","printCanvas","toPrint","length","parsedWay","type","startLatWay","startLonWay","endLatWay","endLonWay","startCircle","startPixX","startPixY","endPixX","endPixY","i","split","beginPath","moveTo","lineTo","strokeStyle","stroke","arc","PI","sqrt","pow","Number","toFixed","refreshButton","toString","currentRoute","clickedOnCanvas","clicked","releasedOnCanvas","released","dX","dY","scrollHandler","scrollVal","setZoomCoords","avgLat","avgLon","newStartLat","newEndLat","newEndLon","newStartLon","e","onChange","target","value","pageX","offsetLeft","pageY","offsetTop","deltaY"],"mappings":"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","sourcesContent":["import './App.css';\r\nimport TextBox from './TextBox'\r\nimport React, {useState, useEffect, useRef} from 'react'\r\nimport { AwesomeButton } from \"react-awesome-button\";\r\nimport \"react-awesome-button/dist/styles.css\";\r\nimport axios from \"axios\";\r\n\r\n// global reference to the canvas element\r\nlet canvas;\r\n\r\n// global reference to the canvas' context\r\nlet ctx;\r\n\r\n//http://www.petecorey.com/blog/2019/08/19/animating-a-canvas-with-react-hooks/\r\n//helps to smooth lines drawn on canvas by increasing resolution\r\nconst getPixelRatio = context => {\r\n    let backingStore =\r\n        context.backingStorePixelRatio ||\r\n        context.webkitBackingStorePixelRatio ||\r\n        context.mozBackingStorePixelRatio ||\r\n        context.msBackingStorePixelRatio ||\r\n        context.oBackingStorePixelRatio ||\r\n        context.backingStorePixelRatio ||\r\n        1;\r\n    return (window.devicePixelRatio || 1) / backingStore;\r\n};\r\n\r\n//initiate values for first render\r\nlet startLat = 41.831311;\r\nlet startLon = -71.406524;\r\nlet endLat = 41.821395;\r\nlet endLon = -71.396608;\r\nlet clickCoordinate = [];\r\nlet releaseCoordinate = [];\r\nlet releaseCoordinate2 = [];\r\nlet routeStartLat = \"\";\r\nlet routeStartLon = \"\";\r\nlet routeEndLat = \"\";\r\nlet routeEndLon = \"\";\r\nlet route = [];\r\nlet totalPathLength;\r\nlet journeyInfoString = \"Enter your source and destination to find the shortest path and \" +\r\n    \"how long it will take to walk there.\";\r\nlet hasClicked = false;\r\n\r\n\r\n//getters and setters for global values\r\nfunction setStartLat(slat) {\r\n    startLat = parseFloat(slat)\r\n}\r\n\r\nfunction getStartLat() {\r\n    return parseFloat(startLat)\r\n}\r\n\r\nfunction setStartLon(slon) {\r\n    startLon = parseFloat(slon)\r\n}\r\n\r\nfunction getStartLon() {\r\n    return parseFloat(startLon)\r\n}\r\n\r\nfunction setEndLat(elat) {\r\n    endLat = parseFloat(elat)\r\n}\r\n\r\nfunction getEndLat() {\r\n    return parseFloat(endLat)\r\n}\r\n\r\nfunction setEndLon(elon) {\r\n    endLon = parseFloat(elon)\r\n}\r\n\r\nfunction getEndLon() {\r\n    return parseFloat(endLon)\r\n}\r\n\r\nfunction setRouteStartLat(slat) {\r\n    routeStartLat = slat\r\n}\r\n\r\nfunction getRouteStartLat() {\r\n    return routeStartLat\r\n}\r\n\r\nfunction setRouteStartLon(slon) {\r\n    routeStartLon = slon\r\n}\r\n\r\nfunction getRouteStartLon() {\r\n    return routeStartLon\r\n}\r\n\r\nfunction setRouteEndLat(elat) {\r\n    routeEndLat = elat\r\n}\r\n\r\nfunction getRouteEndLat() {\r\n    return routeEndLat\r\n}\r\n\r\nfunction setRouteEndLon(elon) {\r\n    routeEndLon = elon\r\n}\r\n\r\nfunction getRouteEndLon() {\r\n    return routeEndLon\r\n}\r\n\r\nfunction setClickCoordinate(click) {\r\n    clickCoordinate = click\r\n}\r\n\r\nfunction getClickCoordinate() {\r\n    return clickCoordinate\r\n}\r\n\r\nfunction setReleaseCoordinate(release) {\r\n    releaseCoordinate = release\r\n}\r\n\r\nfunction getReleaseCoordinate() {\r\n    return releaseCoordinate\r\n}\r\n\r\nfunction setSecondReleaseCoordinate(release) {\r\n    releaseCoordinate2 = release\r\n}\r\n\r\nfunction getSecondReleaseCoordinate() {\r\n    return releaseCoordinate2\r\n}\r\n\r\nfunction setRoute(r) {\r\n    route = r\r\n}\r\n\r\nfunction getRoute() {\r\n    return route\r\n}\r\n\r\n\r\n/**\r\n * Contains all the logic for pixel and coordinate conversions; post requests\r\n * for rendering ways within a bounded box and for getting the shortest path; drawing on canvas; utilities like\r\n * panning, zooming and scrollong;\r\n * @param props\r\n * @returns {JSX.Element}\r\n * @constructor for Route, which is called in App.js\r\n */\r\nfunction Route(props) {\r\n    const w = 600.0;\r\n    const h = 600.0;\r\n    //Ratio used to convert between clicks on the screen and latitudes used to define ways\r\n    let coordToPix = Math.abs(((getStartLon() - getEndLon())/w));\r\n    //The ratio of zooming from the most recent zoom action\r\n    const [zoomInFactor, setZoomInFactor] = useState(1);\r\n    //Message telling the user how long their route will take\r\n    const [journeyStringMsg, setJourneyStringMsg] = useState(\"\");\r\n    //The ways being drawn on the canvas\r\n    const [ways, setWays] = useState([]);\r\n\r\n    // Makes an axios request and gets all ways within current map view\r\n    const requestWays = () => {\r\n        const toSend = {\r\n            //passes in boundaries of current map view\r\n            srclat : getStartLat(),\r\n            srclong : getStartLon(),\r\n            destlat : getEndLat(),\r\n            destlong : getEndLon()\r\n        };\r\n\r\n        let config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Access-Control-Allow-Origin': '*',\r\n            }\r\n        }\r\n\r\n        axios.post(\r\n            \"http://localhost:4567/ways\",\r\n            toSend,\r\n            config\r\n        )\r\n            .then(response => {\r\n                setWays(response.data[\"ways\"]);\r\n            })\r\n\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n    }\r\n\r\n    let ref = useRef();\r\n    //We use this to load the initial view of Browns campus on reloading the page\r\n    const [firstRender, setFirstRender] = useState(true);\r\n    useEffect(() => {\r\n        if (firstRender) {\r\n            setFirstRender(false)\r\n            requestWays()\r\n        }\r\n        canvas = ref.current;\r\n        //http://www.petecorey.com/blog/2019/08/19/animating-a-canvas-with-react-hooks/\r\n        //smooths lines\r\n        ctx = canvas.getContext(\"2d\");\r\n        let ratio = getPixelRatio(ctx);\r\n        let width = getComputedStyle(canvas).getPropertyValue('width').slice(0, -2);\r\n        let height = getComputedStyle(canvas).getPropertyValue('height').slice(0, -2);\r\n        canvas.width = width * ratio;\r\n        canvas.height = height * ratio;\r\n        canvas.style.width = `${width}px`;\r\n        canvas.style.height = `${height}px`;\r\n        //Print route on top of ways and ways on top of background so that the nothing gets covered up\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        ctx.lineWidth = 1\r\n        ctx.fillStyle = \"#e8d8c3\";\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        printCanvas(ways)\r\n        printCanvas(getRoute())\r\n    })\r\n\r\n    const printCanvas = (toPrint) => {\r\n        console.log(\"Printing \" + toPrint.length + \" elements\")\r\n        let parsedWay;\r\n        let type;\r\n        let startLatWay;\r\n        let startLonWay;\r\n        let endLatWay;\r\n        let endLonWay;\r\n        let startCircle = false;\r\n        let startPixX;\r\n        let startPixY;\r\n        let endPixX;\r\n        let endPixY;\r\n\r\n        for (let i=0; i<toPrint.length; i++) {\r\n            //extracts all data needed to print the way at index i\r\n            parsedWay = toPrint[i].split(\",\");\r\n            type = parsedWay[0]\r\n            startLatWay = parseFloat(parsedWay[1]);\r\n            startLonWay = parseFloat(parsedWay[2]);\r\n            endLatWay = parseFloat(parsedWay[3]);\r\n            endLonWay = parseFloat(parsedWay[4]);\r\n            startPixX = w*(startLonWay - getStartLon())/(getEndLon() - getStartLon())\r\n            startPixY = h*(startLatWay - getStartLat())/(getEndLat() - getStartLat())\r\n            endPixX = w*(endLonWay - getStartLon())/(getEndLon() - getStartLon())\r\n            endPixY = h*(endLatWay - getStartLat())/(getEndLat() - getStartLat())\r\n            ctx.beginPath();\r\n            ctx.moveTo(startPixX, startPixY);\r\n            ctx.lineTo(endPixX, endPixY);\r\n            //Traversable ways are red, non-traversable ways are blue, and routes are green\r\n            ctx.strokeStyle = \"red\";\r\n            if (type === \"\" || type === \"unclassified\") {\r\n                ctx.strokeStyle = \"blue\";\r\n            } else {\r\n                if (type === \"path\") {\r\n                    ctx.strokeStyle = \"#80CA28\";\r\n                    //Route made thicker so they stand out\r\n                    ctx.lineWidth = 5\r\n                    ctx.stroke()\r\n                    //startCircle used to tell us when to print the circles around the endpoints of the route\r\n                    if (!startCircle) {\r\n                        //Print circle at beginning of route if not yet printed\r\n                        ctx.moveTo(startPixX, startPixY);\r\n                        ctx.beginPath();\r\n                        ctx.arc(startPixX, startPixY, 15, 0, 2 * Math.PI);\r\n                        startCircle = true\r\n                    } else {\r\n                        if (i === toPrint.length - 1) {\r\n                            //Print circle at end of route if this is the last way being printed\r\n                            ctx.moveTo(endPixX, endPixY);\r\n                            ctx.beginPath();\r\n                            ctx.arc(endPixX, endPixY, 15, 0, 2 * Math.PI);\r\n                        }\r\n                    }\r\n                    startLatWay = parseFloat(parsedWay[1]);\r\n                    startLonWay = parseFloat(parsedWay[2]);\r\n                    endLatWay = parseFloat(parsedWay[3]);\r\n                    endLonWay = parseFloat(parsedWay[4]);\r\n                    //Updating the message telling user how long their route is and will take to walk\r\n                    totalPathLength = totalPathLength + (Math.sqrt(Math.pow(startLatWay-endLatWay, 2) +\r\n                        Math.pow(startLonWay-endLonWay, 2)));\r\n                    journeyInfoString = \"Your journey will be \"+Number((totalPathLength*69).toFixed(2))+\r\n                        \" miles. This will take you \"+Number((totalPathLength*22.25*60).toFixed(2))+\r\n                        \" minutes by foot.\"\r\n\r\n                }\r\n            }\r\n            ctx.stroke();\r\n            //reset line width for non-route ways\r\n            ctx.lineWidth = 1\r\n        }\r\n    }\r\n\r\n    // Makes an axios request and gets the route between the two points defined by the user\r\n    const refreshButton = () => {\r\n        ctx.fillStyle = \"#e8d8c3\";\r\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n        printCanvas(ways)\r\n        //Used to convert start and end points to coordinates\r\n        //in case user inputted one set of coordinates and one pair of street names\r\n        if (getRouteStartLat()===\"\" && getRouteStartLon()===\"\" && getRouteEndLat()!==\"\" && getRouteEndLon()!==\"\"){\r\n            setRouteStartLon((getReleaseCoordinate()[0]*(getEndLon() - getStartLon())/w +  getStartLon()).toString())\r\n            setRouteStartLat((getReleaseCoordinate()[1]*(getEndLat() - getStartLat())/h +  getStartLat()).toString())\r\n\r\n        } else if (getRouteEndLat()===\"\" && getRouteEndLon()===\"\" &&\r\n            getRouteStartLat()!==\"\" && getRouteStartLon()!==\"\"){\r\n\r\n            setRouteEndLon((getReleaseCoordinate()[0]*(getEndLon() - getStartLon())/w +  getStartLon()).toString())\r\n            setRouteEndLat((getReleaseCoordinate()[1]*(getEndLat() - getStartLat())/h +  getStartLat()).toString())\r\n        }\r\n\r\n        const toSend = {\r\n            srclat : getRouteStartLat(),\r\n            srclong : getRouteStartLon(),\r\n            destlat : getRouteEndLat(),\r\n            destlong : getRouteEndLon()\r\n        };\r\n\r\n        let config = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                'Access-Control-Allow-Origin': '*',\r\n            }\r\n        }\r\n\r\n        axios.post(\r\n            \"http://localhost:4567/route\",\r\n            toSend,\r\n            config\r\n        )\r\n            .then(response => {\r\n                let currentRoute = response.data[\"route\"]\r\n                totalPathLength = 0;\r\n                //find path\r\n                setRoute(currentRoute);\r\n                //print path\r\n                printCanvas(currentRoute)\r\n                //tell user length and walking time of path\r\n                setJourneyStringMsg(journeyInfoString)\r\n            })\r\n\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n    }\r\n\r\n    const clickedOnCanvas = (clicked) => {\r\n            setClickCoordinate(clicked)\r\n    }\r\n\r\n    const releasedOnCanvas = (released) => {\r\n        setReleaseCoordinate(released)\r\n        if(getClickCoordinate()[0] === getReleaseCoordinate()[0] &&\r\n            getClickCoordinate()[1] === getReleaseCoordinate()[1]) {\r\n            //Selecting route start/end if clicked and released on same coordinate\r\n            if (hasClicked){\r\n                // clicked and released second coordinate, time to calculate route\r\n                setRouteStartLon(getSecondReleaseCoordinate()[0]*(getEndLon() - getStartLon())/w +  getStartLon())\r\n                setRouteStartLat(getSecondReleaseCoordinate()[1]*(getEndLat() - getStartLat())/h +  getStartLat())\r\n                setRouteEndLon(released[0]*(getEndLon() - getStartLon())/w +  getStartLon())\r\n                setRouteEndLat(released[1]*(getEndLat() - getStartLat())/h +  getStartLat())\r\n                //finds route and print\r\n                refreshButton();\r\n                hasClicked = false;\r\n            } else {\r\n                //clicked and released first coordinate\r\n                setSecondReleaseCoordinate(released)\r\n                hasClicked = true;\r\n            }\r\n        } else {\r\n            //Panning if clicked and released on different coordinates\r\n            let dX = (parseFloat(getReleaseCoordinate()[0]) - parseFloat(getClickCoordinate()[0]))*coordToPix\r\n            let dY = (parseFloat(getReleaseCoordinate()[1]) - parseFloat(getClickCoordinate()[1]))*coordToPix\r\n                setStartLat(getStartLat() + dY);\r\n                setEndLat(getEndLat() + dY);\r\n                setEndLon(getEndLon() - dX);\r\n                setStartLon(getStartLon() - dX);\r\n                //reprint way and route with new boundaries\r\n                requestWays();\r\n                printCanvas(getRoute())\r\n\r\n\r\n        }\r\n    }\r\n\r\n    const scrollHandler = (scrollVal) => {\r\n        if (scrollVal<0){\r\n            //zooming in\r\n            setZoomCoords(0.91)\r\n        } else if (scrollVal>0){\r\n            //zooming out\r\n            setZoomCoords(1.1)\r\n        }\r\n    }\r\n\r\n    const setZoomCoords = (ratio) => {\r\n        //set bounding box based on zoom ratio\r\n        const avgLat = ((getStartLat() + getEndLat())/2)\r\n        const avgLon = ((getStartLon() + getEndLon())/2)\r\n        const newStartLat = avgLat + (Math.abs(getStartLat() - avgLat) * ratio);\r\n        const newEndLat = avgLat - (Math.abs(getEndLat() - avgLat) * ratio);\r\n        const newEndLon = avgLon + (Math.abs(getEndLon() - avgLon) * ratio);\r\n        const newStartLon = avgLon - (Math.abs(getStartLon() - avgLon) * ratio);\r\n        setStartLat(newStartLat);\r\n        setEndLat(newEndLat);\r\n        setEndLon(newEndLon);\r\n        setStartLon(newStartLon);\r\n        //reprint canvas if zooming out\r\n        if (zoomInFactor > 1) {\r\n            requestWays();\r\n        } else {\r\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n            ctx.lineWidth = 1\r\n            ctx.fillStyle = \"#e8d8c3\";\r\n            ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n            printCanvas(ways)\r\n            printCanvas(getRoute())\r\n        }\r\n        setZoomInFactor(ratio);\r\n  }\r\n\r\n  return (\r\n    <div className=\"Route\">\r\n      <header className=\"Route-header\">\r\n        <title>This is a title</title>\r\n      </header>\r\n        <TextBox label={\"Street 1 or Start Latitude \"} onChange = {setRouteStartLat}/>\r\n        <TextBox label={\"Cross Street 1 or Start Longitude \"} onChange = {setRouteStartLon}/>\r\n        <TextBox label={\"Street 2 or End Latitude \"} onChange = {setRouteEndLat}/>\r\n        <TextBox label={\"Cross Street 2 or End Longitude \"} onChange = {setRouteEndLon}/>\r\n        <AwesomeButton type=\"primary\" onPress={() => {refreshButton()}}>Find Path</AwesomeButton>\r\n        <AwesomeButton type=\"primary\" onPress={() => {setZoomCoords(0.91)}}>+</AwesomeButton>\r\n        <AwesomeButton type=\"primary\" onPress={() => {setZoomCoords(1.1)}}>-</AwesomeButton>\r\n        <p>\r\n            {journeyStringMsg}\r\n      </p>\r\n        <canvas\r\n            ref={ref}\r\n            style={{ width: w, height: h }}\r\n            onChange={(e) => props.onChange(e.target.value)}\r\n            onMouseDown={(e) => clickedOnCanvas([e.pageX - canvas.offsetLeft, e.pageY - canvas.offsetTop])}\r\n            onMouseUp={(e) => releasedOnCanvas([e.pageX - canvas.offsetLeft, e.pageY - canvas.offsetTop])}\r\n            onWheel = {(e) => scrollHandler(e.deltaY)}\r\n        />\r\n    </div>\r\n  );\r\n}\r\nexport default Route;"]},"metadata":{},"sourceType":"module"}